import globals from "globals";
import pluginJs from "@eslint/js";

export default [
  { languageOptions: { globals: globals.node } },
  pluginJs.configs.recommended,
  {
    rules: {
      // Variables and scope management
      "no-unused-vars": [
        "error",
        {
          argsIgnorePattern: "^_",
          varsIgnorePattern: "^_",
          caughtErrorsIgnorePattern: "^_",
        },
      ],
      "no-undef": "error",
      "no-global-assign": "error",
      "no-implicit-globals": "error",

      // Error prevention
      "no-unreachable": "error",
      "no-unreachable-loop": "error",
      "no-constant-condition": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-empty": ["error", { allowEmptyCatch: true }],
      "no-ex-assign": "error",
      "no-func-assign": "error",
      "no-import-assign": "error",
      "no-invalid-regexp": "error",
      "no-irregular-whitespace": "error",
      "no-loss-of-precision": "error",
      "no-misleading-character-class": "error",
      "no-prototype-builtins": "error",
      "no-self-assign": "error",
      "no-self-compare": "error",
      "no-sparse-arrays": "error",
      "no-template-curly-in-string": "error",
      "no-unmodified-loop-condition": "error",
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-useless-backreference": "error",
      "use-isnan": "error",
      "valid-typeof": "error",

      // Best practices
      "array-callback-return": ["error", { allowImplicit: true }],
      "block-scoped-var": "error",
      "consistent-return": "error",
      curly: ["error", "multi-line"],
      "default-case-last": "error",
      "dot-notation": "error",
      eqeqeq: ["error", "always", { null: "ignore" }],
      "grouped-accessor-pairs": "error",
      "guard-for-in": "error",
      "no-alert": "error",
      "no-caller": "error",
      "no-case-declarations": "error",
      "no-constructor-return": "error",
      "no-else-return": "error",
      "no-empty-function": ["error", { allow: ["arrowFunctions"] }],
      "no-empty-pattern": "error",
      "no-eval": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-fallthrough": "error",
      "no-floating-decimal": "error",
      "no-implicit-coercion": "error",
      "no-implied-eval": "error",
      "no-invalid-this": "error",
      "no-iterator": "error",
      "no-labels": "error",
      "no-lone-blocks": "error",
      "no-loop-func": "error",
      "no-multi-spaces": "error",
      "no-multi-str": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-wrappers": "error",
      "no-octal": "error",
      "no-octal-escape": "error",
      "no-param-reassign": ["error", { props: false }],
      "no-proto": "error",
      "no-redeclare": "error",
      "no-return-assign": "error",
      "no-return-await": "error",
      "no-script-url": "error",
      "no-sequences": "error",
      "no-throw-literal": "error",
      "no-unneeded-ternary": "error",
      "no-unused-expressions": [
        "error",
        { allowShortCircuit: true, allowTernary: true },
      ],
      "no-useless-call": "error",
      "no-useless-catch": "error",
      "no-useless-concat": "error",
      "no-useless-escape": "error",
      "no-useless-return": "error",
      "no-void": "error",
      "no-with": "error",
      "prefer-const": "error",
      "prefer-promise-reject-errors": "error",
      radix: "error",
      "require-await": "error",
      "vars-on-top": "error",
      yoda: "error",

      // ES6+ features
      "arrow-spacing": "error",
      "constructor-super": "error",
      "no-class-assign": "error",
      "no-confusing-arrow": ["error", { allowParens: true }],
      "no-const-assign": "error",
      "no-dupe-class-members": "error",
      "no-duplicate-imports": "error",
      "no-new-symbol": "error",
      "no-this-before-super": "error",
      "no-useless-computed-key": "error",
      "no-useless-constructor": "error",
      "no-useless-rename": "error",
      "no-var": "error",
      "object-shorthand": "error",
      "prefer-arrow-callback": "error",
      "prefer-destructuring": [
        "error",
        {
          array: false,
          object: true,
        },
        {
          enforceForRenamedProperties: false,
        },
      ],
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "require-yield": "error",
      "rest-spread-spacing": "error",
      "symbol-description": "error",
      "template-curly-spacing": "error",
      "yield-star-spacing": "error",

      // Style and formatting
      "array-bracket-spacing": ["error", "never"],
      "block-spacing": "error",
      "brace-style": ["error", "1tbs", { allowSingleLine: true }],
      "comma-dangle": ["error", "always-multiline"],
      "comma-spacing": "error",
      "comma-style": "error",
      "computed-property-spacing": "error",
      "eol-last": "error",
      "func-call-spacing": "error",
      indent: ["error", 2, { SwitchCase: 1 }],
      "key-spacing": "error",
      "keyword-spacing": "error",
      "max-len": [
        "error",
        {
          code: 120,
          ignoreUrls: true,
          ignoreStrings: true,
          ignoreTemplateLiterals: true,
          ignoreRegExpLiterals: true,
        },
      ],
      "no-mixed-spaces-and-tabs": "error",
      "no-multiple-empty-lines": ["error", { max: 2, maxEOF: 1 }],
      "no-trailing-spaces": "error",
      "object-curly-spacing": ["error", "always"],
      "operator-linebreak": ["error", "before"],
      quotes: ["error", "double", { avoidEscape: true }],
      semi: ["error", "always"],
      "semi-spacing": "error",
      "space-before-blocks": "error",
      "space-before-function-paren": [
        "error",
        {
          anonymous: "always",
          named: "never",
          asyncArrow: "always",
        },
      ],
      "space-in-parens": "error",
      "space-infix-ops": "error",
      "space-unary-ops": "error",

      // Node.js specific
      "callback-return": "error",
      "global-require": "error",
      "handle-callback-err": "error",
      "no-buffer-constructor": "error",
      "no-mixed-requires": "error",
      "no-new-require": "error",
      "no-path-concat": "error",
      "no-process-exit": "error",
      "no-sync": ["error", { allowAtRootLevel: true }],
    },
  },
  // Test-specific overrides
  {
    files: ["test/**/*.js"],
    rules: {
      // Allow console in tests
      "no-console": "off",
      // Allow sync operations in tests
      "no-sync": "off",
      // Allow process.exit in tests
      "no-process-exit": "off",
      // More lenient with unused vars in tests (for test setup)
      "no-unused-vars": [
        "error",
        {
          argsIgnorePattern: "^_",
          varsIgnorePattern:
            "^(_|t$|test$|expected|original|updated|formatter)",
          caughtErrorsIgnorePattern: "^_",
        },
      ],
      // Allow empty functions in test mocks
      "no-empty-function": "off",
      // Allow magic numbers in tests
      "no-magic-numbers": "off",
    },
  },
];
