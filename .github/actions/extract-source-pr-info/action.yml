name: Extract Source PR Information
description: Extracts original PR information from spectrum-tokens-studio-data sync actions

inputs:
  pr-body:
    description: "PR body text containing the Actions run URL"
    required: true
  github-token:
    description: "GitHub token for API access"
    required: true

outputs:
  source-pr-title:
    description: "Title of the original PR from spectrum-tokens-studio-data"
    value: ${{ steps.extract.outputs.source_pr_title }}
  source-pr-number:
    description: "Number of the original PR from spectrum-tokens-studio-data"
    value: ${{ steps.extract.outputs.source_pr_number }}
  source-pr-url:
    description: "URL of the original PR from spectrum-tokens-studio-data"
    value: ${{ steps.extract.outputs.source_pr_url }}
  source-pr-author:
    description: "Username of the original PR author"
    value: ${{ steps.extract.outputs.source_pr_author }}
  source-pr-author-name:
    description: "Display name of the original PR author"
    value: ${{ steps.extract.outputs.source_pr_author_name }}
  source-pr-author-email:
    description: "Email of the original PR author"
    value: ${{ steps.extract.outputs.source_pr_author_email }}
  actions-run-url:
    description: "URL of the GitHub Actions run that created this sync"
    value: ${{ steps.extract.outputs.actions_run_url }}

runs:
  using: composite
  steps:
    - name: Extract source PR information
      id: extract
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PR_BODY: ${{ inputs.pr-body }}
      run: |
        # Extract the Actions run URL from PR body
        actions_url=$(echo "$PR_BODY" | grep -o 'https://github.com/adobe/spectrum-tokens-studio-data/actions/runs/[0-9]*' | head -1)

        if [ -z "$actions_url" ]; then
          echo "No Actions run URL found in PR body"
          echo "actions_run_url=" >> $GITHUB_OUTPUT
          echo "source_pr_title=" >> $GITHUB_OUTPUT
          echo "source_pr_number=" >> $GITHUB_OUTPUT
          echo "source_pr_url=" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "actions_run_url=$actions_url" >> $GITHUB_OUTPUT
        echo "Found Actions run URL: $actions_url"

        # Extract run ID from URL
        run_id=$(echo "$actions_url" | grep -o '[0-9]*$')

        # Get the Actions run details using GitHub API
        run_details=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/adobe/spectrum-tokens-studio-data/actions/runs/$run_id")

        # Extract the head commit SHA from the run
        head_sha=$(echo "$run_details" | jq -r '.head_sha // empty')

        if [ -z "$head_sha" ]; then
          echo "Could not extract head commit SHA from Actions run"
          echo "source_pr_title=" >> $GITHUB_OUTPUT
          echo "source_pr_number=" >> $GITHUB_OUTPUT
          echo "source_pr_url=" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Head commit SHA: $head_sha"

        # Find PRs associated with this commit
        prs_response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/adobe/spectrum-tokens-studio-data/commits/$head_sha/pulls")

        # Get the most recent merged PR (should be the source PR)
        source_pr=$(echo "$prs_response" | jq -r '.[] | select(.state == "closed" and .merged_at != null) | {number: .number, title: .title, html_url: .html_url, user: .user} | @base64' | head -1)

        if [ -z "$source_pr" ]; then
          echo "Could not find source PR for commit $head_sha"
          echo "source_pr_title=" >> $GITHUB_OUTPUT
          echo "source_pr_number=" >> $GITHUB_OUTPUT
          echo "source_pr_url=" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Decode and extract PR information
        pr_info=$(echo "$source_pr" | base64 -d)
        pr_title=$(echo "$pr_info" | jq -r '.title')
        pr_number=$(echo "$pr_info" | jq -r '.number')
        pr_url=$(echo "$pr_info" | jq -r '.html_url')
        pr_author=$(echo "$pr_info" | jq -r '.user.login')

        # Get the author's full details
        author_details=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/users/$pr_author")

        author_name=$(echo "$author_details" | jq -r '.name // .login')
        author_email=$(echo "$author_details" | jq -r '.email // ""')

        # If no public email, try to get commit author email from the original PR
        if [ "$author_email" = "" ] || [ "$author_email" = "null" ]; then
          # Get commits from the original PR to find author email
          pr_commits=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/adobe/spectrum-tokens-studio-data/pulls/$pr_number/commits")
          
          author_email=$(echo "$pr_commits" | jq -r '.[0].commit.author.email // ""')
        fi

        # Fallback email if still empty
        if [ "$author_email" = "" ] || [ "$author_email" = "null" ]; then
          author_email="${pr_author}@users.noreply.github.com"
        fi

        echo "Found source PR: #$pr_number - $pr_title"
        echo "Author: $pr_author ($author_name) <$author_email>"

        echo "source_pr_title=$pr_title" >> $GITHUB_OUTPUT
        echo "source_pr_number=$pr_number" >> $GITHUB_OUTPUT
        echo "source_pr_url=$pr_url" >> $GITHUB_OUTPUT
        echo "source_pr_author=$pr_author" >> $GITHUB_OUTPUT
        echo "source_pr_author_name=$author_name" >> $GITHUB_OUTPUT
        echo "source_pr_author_email=$author_email" >> $GITHUB_OUTPUT
